[Кондаков Семен Васильевич, группа БПИ203, вариант по списку: х]

В проекте используются:
8 модулей реализации

Общий размер исходных текстов: 16,2 КБ
Используемая вычислительная система: ОС Windows 10 x64 со сборкой в интерпретаторе Python + тестирование на MacOS Big Sur + Ubuntu 20.04.3


Общая информация:

Задание 3: разработать программу, оформленную в виде консольного приложения, позволяющую считывать несколькими способами входные данные 
об абстрактном представлении конкретных сущностей, выбранных в соответствии с полученным вариантом задания. Хранить в виде упорядоченного контейнера с дальнейшим применением к нему конкретного алгоритма обработки данных, 
который также диктуется выбранным вариантом задания.

Особенностью текущего задания(номер 3) является использование языка программирования, поддерживающего архитектуру динамической типизации (Python 3.9).
В данной реализации используется объектно-ориентированный подход с использованием общего базового класса для формирования иерархии понятий.

Данная реализация считывает входные данные о контейнере одним из двух способов:
из указанного файла (посредством передачи пути к нему в качестве одного из параметров программы) или
посредством генерации рандомных значений. Формат входных данных будет описан далее.

По условию текущего варианта задания (11), в качестве родительского класса используется "абстрактный" класс Number, не обладающий своими полями. 
В качестве наследников рассматриваются сущности Fraction(тип "Дробь", обладающая int полями numeratior и denominator), 
Polar(тип "Полярные координаты", обладающая double полями angle, radius) и Complex(тип "Комплексное число", обладающая double полями real, imaginary). 
Каждая из сущностей имеет возможность использования функции подсчета собственной величины, используемой далее при сортировке. Типом сортировки, является
Binary Insertion (7 функция)


Формат входных данных:

На вход программе подается пять аргументов (путь до main.py сохраняется в нулевой аргумент), а именно:
1) Путь до main.py
2) Флаг, определяющий формат работы программы (генерация рандомных объектов типа "Число" или ввод их из файла)
3) Кол-во генерируемых объектов / название файла, из которого читаются данные (из папки ACS_Hw3_Tests).
4) Название файла, в который будут записываться неотсортированные данные (в папку ACS_Hw3_Results)
5) Название файла, в который будут записываться отсортированные данные (в папку ACS_Hw3_Sorted_Results)


Итоговые шаблоны входных данных:
"<path>\main.py -r <quantity> <first output txt-file path> <second output txt-file path>"
"<path>\main.py -f <first input txt-file> <first output txt-file path> <second output txt-file path>"


Необходимо также учитывать формат ввода данных из файла:

Пример:
1 3 5
2 40.12 135.4
3 10.72 245.6
       |
       |
       v
It is Fraction: numerator = 3 denominator = 18
It is Polar Coords: radius = 40.12 angle = 135.4
It is Complex Number: real = 10.72 imaginary = 245.6
